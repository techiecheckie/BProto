<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;
vy = 0;
ay = 0;

jumping = false;
can_jump = false;
can_roll = false;
rolling = false;
calculated_speed = 0;

ix=0;
iy=0;
ij=0;

x_speed = 4;
jump_speed = 15;
roll_speed = 20;
is_falling = false;

g = 1;
og = 1;
jump_incr = 0.05;
fall_time = 0;

on_ground=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop rolling

rolling = false;
vx = 0;
can_roll = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Controls
ix = keyboard_check(vk_right) - keyboard_check(vk_left);
ij = keyboard_check_pressed(vk_space);
hj = keyboard_check(vk_space);
roll = keyboard_check_pressed(vk_shift);

if(ij &amp;&amp; on_ground &amp;&amp; can_jump){
    vy = -jump_speed;
    jump_time = 0;
    jumping = true;
    can_jump = false;
}

if(roll &amp;&amp; on_ground &amp;&amp; can_roll){
    rs = roll_speed;
    roll_time = 0;
    rolling = true;
    can_roll = false;
}

ix*=x_speed;

if(ix!= 0){
    if(sign(ix)){
        image_xscale = 1;
    }else{
        image_xscale = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player physics
var _sx = x;
var _sy = y;


if(!place_meeting(x,y+1,obj_platform)){
    on_ground = false;
}else{
    fall_time = 0;
    can_jump = true;
    can_roll = true;
}

if(!on_ground){
    if(vy&lt;0){
        jumping = true;
        g = og;
    }else{
        if(jumping){
            fall_time = 0;
            jumping = false;
        }
        fall_time+=jump_incr;
    }
}

if(jumping){
    vy+=g;
}else{
    vy+= min(g,g*fall_time);
}

var _svy = sign(vy);
if(place_meeting(x,y+vy,obj_platform)){
    while(!place_meeting(x,y+_svy,obj_platform)){
        y+=_svy;
    }
    vy=0;
    jumping = false;
    fall_time= 0;
    on_ground = true;
}

y+=vy;

if(ix!=0){
    var _dx = ix - vx;
    var _mag = sqrt(_dx * _dx);
    
    if(_mag &gt; 0){
        var _max = min(_mag,x_speed);
        var _ax = _dx/_mag * _max;
    
        if(!on_ground){
            _ax/=5;
        }
        vx+=_ax;
    }
}

var _svx = sign(vx);
if(place_meeting(x+vx,y,obj_platform)){
    while(!place_meeting(x+_svx,y,obj_platform)){
        x+=_svx;
    }
    vx=0;
}

x+=vx;

if(ix==0){
    if(!on_ground){
        vx+=-sign(vx) * 0.1;
    }else{
        vx=0;
    }
}

x = clamp(x,16,room_width-16);

calculated_speed = point_distance(x,y,_sx,_sy);

if (vy &lt; 0 &amp;&amp; !hj) { vy = max(vy, 0); }

/// Player Step Event
if (roll &amp;&amp; rolling) {
  vx += sign(vx) * roll_speed;
  if alarm[0] == -1 { alarm[0] = room_speed * 1; }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
